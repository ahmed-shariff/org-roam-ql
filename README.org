#+author: Shariff AM Faleel
#+language: en

* org-roam-ql - query language for org-roam

*This package is under active development.*

This package an interface to easily query and display results from your ~org-roam~ database. 

** Screen-shots

You can query org-roam with ~org-roam-ql-search~. The results are displayed in an org-roam like buffer. org-roam-ql also comes with a transient that can be used to modify the results viewed. The transient can be activated with ~v~. You can modify the title (~t~), query (~q~) and specify if the query is a subquery (apply query on the results of the buffer) or query against the org-roam database (~i~). Refreshing the buffer (~r~) will display the updated results.

[[images/demo4.gif]]

The transient is available in the org-roam buffer as well, this allows you to start a query from the results in the org-roam buffer. You also can view the results in an agenda like buffer.

[[images/demo3.gif]]

** Installation
Example configuration:
#+begin_src emacs-lisp
  (use-package org-roam-ql
    :straight (org-roam-ql :type git :host github :repo "ahmed-shariff/org-roam-ql"
                           :files (:defaults (:exclude "org-roam-ql-ql.el")))
    :after (org-roam)
    :bind ((:map org-roam-mode-map
            ;; Have org-roam-ql's transient available in org-roam-mode buffers
            ("v" . org-roam-ql-buffer-dispatch)
            :map minibuffer-mode-map
            ;; Be able to add titles in queries while in minibuffer.
            ;; This is similar to `org-roam-node-insert', but adds
            ;; only title as a string.
            ("C-c n i" . org-roam-ql-insert-node-title))))
#+end_src

** Usage
*** Commands/functions

- ~(org-roam-ql-search SOURCE-OR-QUERY &optional TITLE QUERY)~ - This is an interactive command that creates a ~org-ql~ buffer with the nodes of the corresponding ~SOURCE-OR-QUERY~ with ~TITLE~. Additionally, this also takes a ~org-ql~ query, which will be used to further filter the results from the ~SOURCE-OR-QUERY~. ~SOURCE-OR-QUERY~ is the same as ~org-roam-ql-node~. When called interactively. This can also be called interactively, see below of what the values of ~SOURCE-OR-QUERY~ can be.
- ~(org-roam-ql-nodes SOURCE-OR-QUERY)~ - Given a SOURCE-OR-QUERY, return a list of nodes. SOURCE-OR-QUERY can be one of the following:
  - A list of parameters that can be passed to ~org-roam-db-query~. Should be a list of the form ~(QUERY ARG1 ARG2...)~. The result of calling ~org-roam-db-query~ with these parameters should return a list of records where the first element is the ID of a corresponding node. For example:
  #+begin_src emacs-lisp
  (org-roam-ql-nodes '([:select [id] :from nodes :where (= todo \"TODO\")]))
  #+end_src
  - A buffer or buffer-name of a ~org-roam~ buffer or a ~org-roam-ql~ buffer.
  - A function that returns a list of ~org-roam-nodes~
  - A QUERY which can be passed to ~org-roam-query~, which in itself is a ~org-ql~ predicate.
    #+begin_src emacs-lisp
    (org-roam-ql-nodes '(and (todo "TODO") (tags "tag1" "tag2") "*org-roam*"))
    #+end_src
    The QUERY passed above would test on all org-roam-nodes returned by ~(org-roam-nodes-list)~. In the above example, the result would contain any nodes that have todo set to TODO, have tags "tag1" and "tag2" and is in the org-roam buffer.
    Currently, the query can have the following predicates:
      - ~(or ARG1 ARG2 ...)~ : Test if a node satisfies any of the parameters (when it's a predicate) or is contained in any of them (acceptable values for QUERY in ~org-roam-ql-nodes~). ARG1, ARG2, etc. are any other predicates or an acceptable value QUERY for ~org-roam-ql-nodes~.
      - ~(and ARG1 ARG2 ...)~ : Similar to ~or~, but should satisfy all conditions or contained in the result of acceptable values for QUERY.
      - ~(file REGEXP &optional EXACT)~ : Test if nodes file name matches REGEXP. If EXACT is non-nil, the file slot should be an exact match to REGEXP. Note the file slot of an org-roam-node would contain the absolute path.
      - ~(file-title REGEXP &optional EXACT)~ : Similar to ~file~, tests the file-title slot of a node.
      - ~(id ID)~ : Tests if the ID of a node is a match to the value passed.
      - ~(level LEVEL)~ : Tests if the level of a node is equal to LEVEL.
      - ~(todo REGEXP &optional EXACT)~ : Similar to ~file~, tests the todo state of a node.
      - ~(priority REGEXP &optional EXACT)~ : Similar to ~file~, tests the priority of a node.
      - ~(scheduled)~ : TBD
      - ~(deadline)~ : TBD
      - ~(title REGRXP &optional EXACT)~ : Similar to ~file~, tests the title of a node.
      - ~(properties PROP PROP-VAL)~ : Tests if the value of the property of a node PROP is a match to PROP-VAL. PROP-VAL can be a regular expression.
      - ~(tags TAG1 TAG2 ...)~ : Tests if the tags of a node have TAG1, TAG2, etc.
      - ~(refs REGEXP &optional EXACT)~ : Similar to ~file~, tests the nodes refs slot.
      - ~(backlink-to QUERY)~ : Tests if the node has a backlink to any of the nodes from the resulting QUERY. QUERY is acceptable value for ~org-roam-ql-nodes~.
      - ~(backlink-from QUERY)~ : Similar to ~backlink-to~, tests if there are any backlinks from (forwardlinks) the resulting nodes from QUERY.
      - ~(in-buffer BUFFER-NAME)~ : This is similar to passing a buffer-name to ~org-roam-ql-nodes~. Tests if a node is in the org-roam buffer named BUFFER-NAME.
      - ~(nodes-list NODES-LIST)~ : This is similar to passing a list of nodes to ~org-roam-ql-nodes~. Tests if a node is in the NODES-LIST.
      - ~(function FUNC)~ : This is similar to passing a function to ~org-roam-ql-nodes~. Tests if the node is in the result of executing the function FUNC.
      - ~(funcall FUNC)~ : Tests a node with the function FUNC, which takes an org-roam node as parameter. Test passes if the function returns non-nil.
- ~(org-roam-ql-defpred NAME EXTRACTION-FUNCTION COMPARISON-FUNCTION)~ - Creates a predicate that can be used in QUERY to ~org-roam-ql-nodes~. For example, for a predicate defined as follows:
  #+begin_src emacs-lisp
  (org-roam-ql-defpred sample extraction-func comparison-func)
  #+end_src

  When the following predicate is used in the ~QUERY~:
  #+begin_src emacs-lisp
  (sample arg1 arg2)
  #+end_src

  It tests each ~node~ as follows:
  #+begin_src emacs-lisp
  (apply comparison-func (append (list (funcall extraction-func node)) arg1 arg2))
  #+end_src

  The ~EXTRACTION-FUNCTION~ is a function that takes an org-roam-node and returns a value that will be passed as the first parameter to ~COMPARISON-FUNCTION~. The remainder of the parameters when calling the predicate is passed as remaining parameters ~COMPARISON-FUNCTION~. If the ~COMPARITION-FUNCTION~ returns a non-nil value, it will be included in the result.

- ~(org-roam-ql-defexpansion name expansion-function)~ - Adds an ~EXPANSION-FUNCTION~ which will be identified by ~NAME~ in a org-roam-ql query. The ~EXPANSION-FUNCTION~ should take the parameters passed in the query and return values that can be passed to   ~org-roam-nodes~
*** org dynamic block
Similar to ~org-ql~, ~org-roam-ql~ also provides a dynamic block. The header parameters are as follows:
- ~:query~ - Same as SOURCE-OR-QUERY for ~org-roam-ql-search~ or ~org-roam-ql-nodes~.
- ~:columns~ - A list of columns to display. Each column name is a slot name of ~org-roam-nodes~. For any function/accessor with a name of the form ~org-roam-node-<name>~, which takes a org-roam-node as parameter, ~<name>~ can also be used column name. For example, if there is a function named ~org-roam-node-short-title~, ~short-title~ can be used as a column name, this will result in a column with the title ~short-title~ where the content of each row is the result of calling the respective function.
- ~:take~ (optional) - If a positive integer N, takes the first N elements, if a negative -N, take the last N nodes.
- ~:no-link~ (optional) - if a non-nil value is set, the first column containing the links will be dropped.

If no-link is not provided as a parameter, the first column is a link to the node. Since it is an id link, it will be a backlink to the node.

Following is an example of a dynamic block and its result.

[[file:images/dynamic-block.jpg]]
** Working with ~org-ql~ 
Optionally, ~org-roam-ql~ results can be visualized in [[https://github.com/alphapapa/org-ql][org-ql]], available through the extension ~org-roam-ql-ql~ (naming things is hard!!)
#+begin_src emacs-lisp
  (use-package org-roam-ql-ql
    :straight (org-roam-q-ql :type git :host github :repo "ahmed-shariff/org-roam-ql"
                             :files (:defaults (:exclude "org-roam-ql.el")))
    :after (org-roam org-ql org-roam-ql))
#+end_src

Note that the org-ql only works with org entries, i.e., `heading nodes`. Hence, if there any file-nodes in the result, they will not be displayed. To be clear about that, when org-roam-ql results are displayed in an org-ql-view buffer, a warning is added to the end mentioning how many file-nodes were there in the result. If the extension is loaded, you may view the org-roam-ql results with ~Q~ from the org-roam-ql transient. A org-ql-view can be viewed in an org-roam like buffer with ~R~ from the org-ql-view transient.

[[images/demo5.gif]]
